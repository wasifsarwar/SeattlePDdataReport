} else {
party <- "Republican"
party_col <- "republican.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"republican.majority_position")
}
selected_rep_df$Party
View(selected_rep_df)
# Selects the associated party to account for majority votes
if(selected_rep_df$Party[1,] == "D") {
party <- "Democrat"
party_col <- "democratic.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"democratic.majority_position")
} else {
party <- "Republican"
party_col <- "republican.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"republican.majority_position")
}
# Selects the associated party to account for majority votes
if(selected_rep_df[1,$Party == "D") {
# Selects the associated party to account for majority votes
if(selected_rep_df[1,]$Party == "D") {
party <- "Democrat"
party_col <- "democratic.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"democratic.majority_position")
} else {
party <- "Republican"
party_col <- "republican.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"republican.majority_position")
}
selected_rep_df[1,]
View(search_bill_df)
View(selected_rep_df)
View(vote_data_majority)
View(vote_data_majority)
# Selects the associated party to account for majority votes
if(selected_rep_df[1,]$Party == "D") {
party <- "Democrat"
party_col <- "democratic.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"democratic.majority_position")
} else {
party <- "Republican"
party_col <- "republican.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"republican.majority_position")
}
# Joins the representative's votes and the majority votes
party_majority_position <- left_join(rep_vote_position, vote_data_majority,
by = "bill.bill_id")
# Calculates the percent in which the representative voted with the party majority
percent_rep_vote_majority <- filter(party_majority_position, position ==
!!rlang::sym(party_col)) %>%
nrow() / nrow(party_majority_position) * 100
percent_rep_vote_majority <- round(percent_rep_vote_majority, digits = 0)
# Joins the representative's votes and the majority votes
party_majority_position <- left_join(rep_vote_position, vote_data_majority,
by = "bill.bill_id")
rep_vote_position
rep_vote_position <- select(rep_vote_data, "bill.bill_id", "position") # df
rep_vote_position
rep_vote_resource <- paste0("members/", representative_id, "/votes.json")
rep_vote_response <- GET(paste0(base_uri, rep_vote_resource),
add_headers('X-API-KEY' = api_key))
rep_vote_body <- fromJSON(content(rep_vote_response, "text"))
rep_vote_data <- flatten(data.frame(rep_vote_body$results$votes))
rep_vote_position <- select(rep_vote_data, "bill.bill_id", "position") # df
# Joins the representative's votes and the majority votes
party_majority_position <- left_join(rep_vote_position, vote_data_majority,
by = "bill.bill_id")
# Calculates the percent in which the representative voted with the party majority
percent_rep_vote_majority <- filter(party_majority_position, position ==
!!rlang::sym(party_col)) %>%
nrow() / nrow(party_majority_position) * 100
percent_rep_vote_majority <- round(percent_rep_vote_majority, digits = 0)
selected_rep_df[1,]
rep_resource <- paste0("members/", representative_id,".json")
rep_response <- GET(paste0(base_uri, rep_resource), add_headers("X-API-Key" = api_key))
rep_fromJSON <- fromJSON(content(rep_response, "text"))
rep_gen_data <- flatten(data.frame(rep_fromJSON$results))
rep_role_data <- flatten(data.frame(rep_fromJSON$results$roles))
# Creates a dataframe containing information about the representative
selected_rep_df <- data.frame(rep_gen_data$first_name, rep_gen_data$last_name,
rep_gen_data$twitter_account, rep_role_data$phone,
rep_role_data$office, rep_role_data$state,
rep_gen_data$current_party)
data_columns <- c("First", "Last", "Twitter", "Phone", "Office", "State", "Party")
colnames(selected_rep_df) <- data_columns
selected_rep_df[1,]
View(selected_rep_df)
# Selects the associated party to account for majority votes
rep_vote_party <- selected_rep_df[1,]$Party
source("assignment.R")
# Selects the associated party to account for majority votes
rep_vote_party <- request_rep$Party
# Selects the associated party to account for majority votes
rep_vote_party <- request_rep[1,]$Party
# Selects the associated party to account for majority votes
rep_vote_party <- request_rep(representative_id)[1,]$Party
# Selects the associated party to account for majority votes
rep_vote_party <- request_rep(representative_id)[1,]$Party
if( rep_vote_party == "D") {
party <- "Democrat"
party_col <- "democratic.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"democratic.majority_position")
} else {
party <- "Republican"
party_col <- "republican.majority_position"
vote_data_majority <- select(vote_data, "bill.bill_id",
"republican.majority_position")
}
percent_rep_vote_opposing <- 100 - percent_rep_vote_majority
# Load the world map
library("ggplot2")
library("maps")
library("dplyr")
map_data <- map_data("world")
# Get ISO3 Code of each region from map_data
iso <- iso.alpha(map_data$region, n = 3)
map_data <- mutate(map_data, ISO3 = iso)
View(map_data)
View(map_data)
View(map_data)
# Load the world map
library("ggplot2")
library("maps")
library("dplyr")
map_data <- map_data("world")
# Get ISO3 Code of each region from map_data and combine it back to map_data
iso <- iso.alpha(map_data$region, n = 3)
map_data <- mutate(map_data, ISO3 = iso)
# Emissions data that is being analyzed => 'co2_e_kt' and 'co2_e_pc'
# Goal is to join the map_data with emissions_data.
# Join map_data with emissions data (co2_e_kt)
iso_co2_e_kt <- left_join(co2_e_kt, map_data, by = c("Country.Code" = "a3"))
# Join map_data with emissions data (co2_e_pc)
iso_co2_e_pc <- left_join(co2_e_pc, map_data, by = c("Country.Code" = "a3"))
# Plot the choropleth map of the world. Working data = 'iso_co2_e_kt' in year 2016
ggplot(data = iso_co2_e_kt) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Most_Recent.x),
color = "black") +
scale_fill_continuous(low = "white", high = "red", name = "CO2 Emissions\n(kilotons)") +
labs(title = "Global CO2 Emissions in 2016") +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
# Emissions data that is being analyzed => 'co2_e_kt' and 'co2_e_pc'
# Goal is to join the map_data with emissions_data.
# Join map_data with emissions data (co2_e_kt)
iso_co2_e_kt <- left_join(co2_e_kt, map_data, by = c("Country.Code" = "a3"))
library("tidyverse")
library("tidyverse")
library("dplyr")
library("ggplot2")
source("assignment.R")
# Load the world map
map_data <- map_data("world")
# Load the world map
map_data <- map_data("world")
library("tidyverse")
library("ggplot2")
library("dplyr")
source("assignment.R")
# Load the world map
library("ggplot2")
map_data <- map_data("world")
library("tidyverse")
library("ggplot2")
library("dplyr")
source("assignment.R")
map_data <- map_data(world)
"world"
# Load the world map
library("ggplot2")
map_data <- map_data("world")
# Loading the selected data .csv file
selected_data <- read.csv("data/WDI_selected_Data.csv", stringsAsFactors = FALSE)
# Loading the emissions data .csv file
emissions_data <- read.csv("data/WDI_emissions_Data.csv", stringsAsFactors = FALSE)
emissions_data <- emissions_data[-c(2822, 2823, 2824, 2825, 2826), ]
# how do you rearrage the data so that the years are all in one column and not spread out?
wide_emissions <- gather(emissions_data, key = Year, value = Emissions,
YR1998, YR1999, YR2000, YR2001, YR2002, YR2003,
YR2004, YR2005, YR2006, YR2007, YR2008, YR2009,
YR2010, YR2011, YR2012, YR2013, YR2014)
# Filtering the "Co2 Emissions KT" data
co2_e_kt <- filter(emissions_data, Series.Code == "EN.ATM.CO2E.KT")
co2_e_kt <- as.data.frame(co2_e_kt)
numeric_values <- !is.na(apply(co2_e_kt, 2, as.numeric))
co2_e_kt[numeric_values] <- round(as.numeric(co2_e_kt[numeric_values]), 2)
# Filtering the "Co2 Emissions KT" data
co2_e_kt <- filter(emissions_data, Series.Code == "EN.ATM.CO2E.KT")
co2_e_kt <- as.data.frame(co2_e_kt)
numeric_values <- !is.na(apply(co2_e_kt, 2, as.numeric))
co2_e_kt[numeric_values] <- round(as.numeric(co2_e_kt[numeric_values]), 2)
# Filtering the "Co2 Emissions Per Capita" data
# Rounds off the numerical values in this dataframe.
co2_e_pc <- filter(emissions_data, Series.Code == "EN.ATM.CO2E.PC")
co2_e_pc <- as.data.frame(co2_e_pc)
numeric_values <- !is.na(apply(co2_e_pc, 2, as.numeric))
co2_e_pc[numeric_values] <- round(as.numeric(co2_e_pc[numeric_values]), 2)
# Filtering the "Selected_data.csv" file for the GDP per capita.
# Rounds off the numerical values in this dataframe.
selected_data <- filter(selected_data, Series.Code == "NY.GDP.PCAP.CD")
selected_data <- as.data.frame(selected_data)
numeric_values <- !is.na(apply(selected_data, 2, as.numeric))
selected_data[numeric_values] <- round(as.numeric(selected_data[numeric_values]), 2)
# Joining emissions_data and selected_data for analysis purposes later on in R Markdown
joined_data <- left_join(emissions_data, selected_data, by = "Country.Code")
joined_data_gdp_pc <- filter(joined_data, Series.Code.x == "EN.ATM.CO2E.PC")
joined_data_gdp_kt <- filter(joined_data, Series.Code.x == "EN.ATM.CO2E.KT")
# Calculate for the highest emissions difference from 'YR1998' to 'Most_Recent'
co2_e_pc <- mutate(joined_data_gdp_pc, Difference = (Most_Recent.x - YR1998))
usa_data <- filter(co2_e_pc, Country.Code == "USA")
# Arrange the data from MAX difference to MIN difference
# (this way it is dynamic if the database updates)
sorted_co2_pc <- arrange(co2_e_pc, -Difference)
# Add data about the USA for comparison
top5_co2_pc <- sorted_co2_pc[1:5,]
top5_co2_pc <- rbind(top5_co2_pc, usa_data)
# Create a simple bar graph that shows a comparison in emissions between the
# top 5 countries
top5_emissions_bar <- ggplot(data = top5_co2_pc) +
geom_bar(mapping = aes(x = Country.Code, y = Difference, fill = Difference),
stat = "identity") +
labs(
title = "Countries with the Largest Increase in CO2 Emission (1998-2014)",
x = "Country Code",
y = "CO2 Emissions (metric tons per capita)"
)
top5_emissions_bar
# Calculate for the highest emmissions difference from '1998' to 'Most_Recent'
# in order to find the countries that emit the highest CO2 since 1998.
co2_e_kt <- mutate(joined_data_gdp_kt, Difference = (Most_Recent.x - YR1998))
sorted_co2_kt <- arrange(co2_e_kt, -Most_Recent.x)
top3_co2_kt <- sorted_co2_kt[1:4,]
# Renaming the columns
data_columns <- c("Country.Code", "Series.Code.x", "x.1998", "x.1999", "x.2000", "x.2001",
"x.2002", "x.2003", "x.2004", "x.2005", "x.2006", "x.2007", "x.2008", "x.2009",
"x.2010", "x.2011", "x.2012", "x.2013", "x.2014", "Most_Recent.x", "Country.Name",
"Series.Name", "Series.Code.y", "y.1998", "y.1999", "y.2000", "y.2001",
"y.2002", "y.2003", "y.2004", "y.2005", "y.2006", "y.2007", "y.2008", "y.2009",
"y.2010", "y.2011", "y.2012", "y.2013", "y.2014", "Most_Recent.y", "Difference_kt")
colnames(top3_co2_kt) <- data_columns
# Rearrange 'top3_co2_kt' from 'wide data' to 'long data'
W_top3_co2_kt <- gather(top3_co2_kt, key = Year, value = Emissions,
"x.1998", "x.1999", "x.2000", "x.2001",
"x.2002", "x.2003", "x.2004", "x.2005",
"x.2006", "x.2007", "x.2008", "x.2009",
"x.2010", "x.2011", "x.2012", "x.2013",
"x.2014")
# Create a faceted point graph
top3_fg <- ggplot(data = W_top3_co2_kt) +
geom_point(mapping = aes(x = Year, y = Emissions), color = "blue", size = 3) +
facet_wrap(~Country.Code, nrow = 4) +
labs(
title = "Countries with the Highest Overall CO2 Emissions",
x = "Year",
y = "CO2 Emissions (kilotons)"
)
top3_fg
# Load the world map
library("ggplot2")
map_data <- map_data("world")
# Get ISO3 Code of each region from map_data and combine it back to map_data
iso <- iso.alpha(map_data$region, n = 3)
map_data <- map_data("world")
map_data("map")
# Load the world map
library("ggplot2")
# Load the world map
library("ggplot2")
map_data <- map_data("world")
# Get ISO3 Code of each region from map_data and combine it back to map_data
iso <- iso.alpha(map_data$region, n = 3)
map_data <- mutate(map_data, ISO3 = iso)
# Emissions data that is being analyzed => 'co2_e_kt' and 'co2_e_pc'
# Goal is to join the map_data with emissions_data.
# Join map_data with emissions data (co2_e_kt)
iso_co2_e_kt <- left_join(co2_e_kt, map_data, by = c("Country.Code" = "a3"))
library("tidyverse")
library("tidyverse")
library("ggplot2")
library("dplyr")
source("assignment.R")
# Load the world map
library("ggplot2")
map_data <- map_data("world")
# Get ISO3 Code of each region from map_data and combine it back to map_data
iso <- iso.alpha(map_data$region, n = 3)
map_data <- mutate(map_data, ISO3 = iso)
# Emissions data that is being analyzed => 'co2_e_kt' and 'co2_e_pc'
# Goal is to join the map_data with emissions_data.
# Join map_data with emissions data (co2_e_kt)
iso_co2_e_kt <- left_join(co2_e_kt, map_data, by = c("Country.Code" = "a3"))
# Join map_data with emissions data (co2_e_pc)
iso_co2_e_pc <- left_join(co2_e_pc, map_data, by = c("Country.Code" = "a3"))
View(map_data)
View(co2_e_kt)
# Emissions data that is being analyzed => 'co2_e_kt' and 'co2_e_pc'
# Goal is to join the map_data with emissions_data.
# Join map_data with emissions data (co2_e_kt)
iso_co2_e_kt <- left_join(co2_e_kt, map_data, by = c("Country.Code" = "ISO3"))
# Join map_data with emissions data (co2_e_pc)
iso_co2_e_pc <- left_join(co2_e_pc, map_data, by = c("Country.Code" = "ISO3"))
View(iso_co2_e_kt)
# Plot the choropleth map of the world. Working data = 'iso_co2_e_kt' in year 2016
ggplot(data = iso_co2_e_kt) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Most_Recent.x),
color = "black") +
scale_fill_continuous(low = "white", high = "red", name = "CO2 Emissions\n(kilotons)") +
labs(title = "Global CO2 Emissions in 2016") +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
# Plot the choropleth map of the world. Working data = 'iso_co2_e_kt' in year 2016
ggplot(data = iso_co2_e_kt) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Most_Recent.x),
color = "black") +
scale_fill_continuous(low = "white", high = "red", name = "CO2 Emissions\n(kilotons)") +
labs(title = "Global CO2 Emissions in 2016", size = 5) +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
# Plot the choropleth map of the world. Working data = 'iso_co2_e_kt' in year 2016
world_kt_graph <- ggplot(data = iso_co2_e_kt) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Most_Recent.x),
color = "black") +
scale_fill_continuous(low = "white", high = "red", name = "CO2 Emissions\n(kilotons)") +
labs(title = "Global CO2 Emissions in 2016") +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
##########################################
## Section 3: Interactive Visualization ##
##########################################
library(plotly)
library(maps)
##########################################
## Section 3: Interactive Visualization ##
##########################################
install.packages("plotly")
##########################################
## Section 3: Interactive Visualization ##
##########################################
# install.packages("plotly")
library("plotly")
##########################################
## Section 3: Interactive Visualization ##
##########################################
# install.packages("plotly")
library(plotly)
##########################################
## Section 3: Interactive Visualization ##
##########################################
# install.packages("plotly")
library(plotly)
##########################################
## Section 3: Interactive Visualization ##
##########################################
# install.packages("plotly")
library(plotly)
##########################################
## Section 3: Interactive Visualization ##
##########################################
install.packages("plotly")
library("plotly")
library("maps")
# map data
county_df <- map_data("county")
# map data
county_df <- map_data("county")
library("maps")
state_df <- map_data("state")
# map data
county_df <- map_data("county")
##########################################
## Section 3: Interactive Visualization ##
##########################################
#install.packages("plotly")
library("plotly")
library("maps")
# map data
county_df <- map_data("county")
state_df <- map_data("state")
library("ggplot2")
# map data
county_df <- map_data("county")
state_df <- map_data("state")
# map data
county_df <- map_data("county")
map_data <- map_data("world")
# map data
county_df <- map_data("county")
state_df <- map_data("state")
county_df$subregion <- gsub(" ", "", county_df$subregion)
# Install and load the `shiny` package
install.packages("shiny")
library("shiny")
library("shiny")
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jeremyhchang',
token='AC30EF80606C5D1C61B8C9B704623C4A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeremyhchang',
token='AC30EF80606C5D1C61B8C9B704623C4A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeremyhchang',
token='AC30EF80606C5D1C61B8C9B704623C4A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
v
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
shiny::runApp('Desktop')
runApp('Desktop')
0
resource <- paste0("https://data.seattle.gov/resource/y7pv-r3kh.json")
response <- GET(resource, add_headers(api_key))
library("dplyr")
library("ggplot2")
library("tidyverse")
library("shiny")
#####################
######## API ########
#####################
request_topic <- function(topic) {
resource <- paste0("https://data.seattle.gov/resource/y7pv-r3kh.json")
response <- GET(resource, add_headers(api_key))
fromJSON <- fromJSON(content(response, "text"))
data <- flatten(data.frame(fromJSON))
bill_data <- bill_data[1:10, ]
legislator <- paste(bill_data$sponsor_name, bill_data$sponsor_party, bill_data$sponsor_state, sep = ", ")
short_df <- data.frame(bill_data$bill_id, bill_data$short_title,
legislator, bill_data$active,
bill_data$govtrack_url)
data_columns <- c("Bill ID", "Name", "Legislator", "Active", "URL")
colnames(short_df) <- data_columns
short_df
}
resource <- paste0("https://data.seattle.gov/resource/y7pv-r3kh.json")
response <- GET(resource, add_headers(api_key))
fromJSON <- fromJSON(content(response, "text"))
response <- GET(resource, add_headers(api_key))
source("api_token.R")
setwd("~/Desktop/INFO 201 HW/SeattlePDdataReport")
library("dplyr")
library("ggplot2")
library("tidyverse")
library("shiny")
source("api_token.R")
#####################
######## API ########
#####################
resource <- paste0("https://data.seattle.gov/resource/y7pv-r3kh.json")
response <- GET(resource, add_headers(api_key))
library("httr")
#####################
######## API ########
#####################
resource <- paste0("https://data.seattle.gov/resource/y7pv-r3kh.json")
response <- GET(resource, add_headers(api_key))
response <- GET(resource, add_headers(token))
fromJSON <- fromJSON(content(response, "text"))
library("jsonlite")
fromJSON <- fromJSON(content(response, "text"))
data <- flatten(data.frame(fromJSON))
bill_data <- bill_data[1:10, ]
View(data)
