"x.2006", "x.2007", "x.2008", "x.2009",
"x.2010", "x.2011", "x.2012", "x.2013",
"x.2014")
# Create a faceted point graph
top3_fg <- ggplot(data = W_top3_co2_kt) +
geom_point(mapping = aes(x = Year, y = Emissions), color = "blue", size = 3) +
facet_wrap(~Country.Code, nrow = 4) +
labs(
title = "Countries with the Highest Overall CO2 Emissions",
x = "Year",
y = "CO2 Emissions (kilotons)"
)
top3_fg
# Load the world map
library("ggplot2")
map_data <- map_data("world")
# Get ISO3 Code of each region from map_data and combine it back to map_data
iso <- iso.alpha(map_data$region, n = 3)
map_data <- map_data("world")
map_data("map")
# Load the world map
library("ggplot2")
# Load the world map
library("ggplot2")
map_data <- map_data("world")
# Get ISO3 Code of each region from map_data and combine it back to map_data
iso <- iso.alpha(map_data$region, n = 3)
map_data <- mutate(map_data, ISO3 = iso)
# Emissions data that is being analyzed => 'co2_e_kt' and 'co2_e_pc'
# Goal is to join the map_data with emissions_data.
# Join map_data with emissions data (co2_e_kt)
iso_co2_e_kt <- left_join(co2_e_kt, map_data, by = c("Country.Code" = "a3"))
library("tidyverse")
library("tidyverse")
library("ggplot2")
library("dplyr")
source("assignment.R")
# Load the world map
library("ggplot2")
map_data <- map_data("world")
# Get ISO3 Code of each region from map_data and combine it back to map_data
iso <- iso.alpha(map_data$region, n = 3)
map_data <- mutate(map_data, ISO3 = iso)
# Emissions data that is being analyzed => 'co2_e_kt' and 'co2_e_pc'
# Goal is to join the map_data with emissions_data.
# Join map_data with emissions data (co2_e_kt)
iso_co2_e_kt <- left_join(co2_e_kt, map_data, by = c("Country.Code" = "a3"))
# Join map_data with emissions data (co2_e_pc)
iso_co2_e_pc <- left_join(co2_e_pc, map_data, by = c("Country.Code" = "a3"))
View(map_data)
View(co2_e_kt)
# Emissions data that is being analyzed => 'co2_e_kt' and 'co2_e_pc'
# Goal is to join the map_data with emissions_data.
# Join map_data with emissions data (co2_e_kt)
iso_co2_e_kt <- left_join(co2_e_kt, map_data, by = c("Country.Code" = "ISO3"))
# Join map_data with emissions data (co2_e_pc)
iso_co2_e_pc <- left_join(co2_e_pc, map_data, by = c("Country.Code" = "ISO3"))
View(iso_co2_e_kt)
# Plot the choropleth map of the world. Working data = 'iso_co2_e_kt' in year 2016
ggplot(data = iso_co2_e_kt) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Most_Recent.x),
color = "black") +
scale_fill_continuous(low = "white", high = "red", name = "CO2 Emissions\n(kilotons)") +
labs(title = "Global CO2 Emissions in 2016") +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
# Plot the choropleth map of the world. Working data = 'iso_co2_e_kt' in year 2016
ggplot(data = iso_co2_e_kt) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Most_Recent.x),
color = "black") +
scale_fill_continuous(low = "white", high = "red", name = "CO2 Emissions\n(kilotons)") +
labs(title = "Global CO2 Emissions in 2016", size = 5) +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
# Plot the choropleth map of the world. Working data = 'iso_co2_e_kt' in year 2016
world_kt_graph <- ggplot(data = iso_co2_e_kt) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Most_Recent.x),
color = "black") +
scale_fill_continuous(low = "white", high = "red", name = "CO2 Emissions\n(kilotons)") +
labs(title = "Global CO2 Emissions in 2016") +
theme_bw() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
##########################################
## Section 3: Interactive Visualization ##
##########################################
library(plotly)
library(maps)
##########################################
## Section 3: Interactive Visualization ##
##########################################
install.packages("plotly")
##########################################
## Section 3: Interactive Visualization ##
##########################################
# install.packages("plotly")
library("plotly")
##########################################
## Section 3: Interactive Visualization ##
##########################################
# install.packages("plotly")
library(plotly)
##########################################
## Section 3: Interactive Visualization ##
##########################################
# install.packages("plotly")
library(plotly)
##########################################
## Section 3: Interactive Visualization ##
##########################################
# install.packages("plotly")
library(plotly)
##########################################
## Section 3: Interactive Visualization ##
##########################################
install.packages("plotly")
library("plotly")
library("maps")
# map data
county_df <- map_data("county")
# map data
county_df <- map_data("county")
library("maps")
state_df <- map_data("state")
# map data
county_df <- map_data("county")
##########################################
## Section 3: Interactive Visualization ##
##########################################
#install.packages("plotly")
library("plotly")
library("maps")
# map data
county_df <- map_data("county")
state_df <- map_data("state")
library("ggplot2")
# map data
county_df <- map_data("county")
state_df <- map_data("state")
# map data
county_df <- map_data("county")
map_data <- map_data("world")
# map data
county_df <- map_data("county")
state_df <- map_data("state")
county_df$subregion <- gsub(" ", "", county_df$subregion)
# Install and load the `shiny` package
install.packages("shiny")
library("shiny")
library("shiny")
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jeremyhchang',
token='AC30EF80606C5D1C61B8C9B704623C4A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeremyhchang',
token='AC30EF80606C5D1C61B8C9B704623C4A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeremyhchang',
token='AC30EF80606C5D1C61B8C9B704623C4A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
v
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
rsconnect::setAccountInfo(name='jeremyhchang', token='AC30EF80606C5D1C61B8C9B704623C4A', secret='K05SUL+yJ55zP91+FvXLXIOr1etv+bbWWbDEU+RW')
shiny::runApp('Desktop')
runApp('Desktop')
#####################
#### SECTION TWO ####
#####################
data <- unzip("./data/Seattle_Police_Department_Police_Report_Incident.csv.zip",
files = c("Seattle_Police_Department_Police_Report_Incident.csv"))
#####################
#### SECTION TWO ####
#####################
data <- unzip("./data/Seattle_Police_Department_Police_Report_Incident.csv.zip",
"Seattle_Police_Department_Police_Report_Incident.csv")
#####################
#### SECTION TWO ####
#####################
data <- unzip("data/Seattle_Police_Department_Police_Report_Incident.csv.zip",
"Seattle_Police_Department_Police_Report_Incident.csv")
library(dplyr)
library(ggplot2)
library(tidyverse)
library(shiny)
library(httr)
library(jsonlite)
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE,fill = TRUE, header = TRUE)
setwd("~/Desktop/INFO 201 HW/SeattlePDdataReport")
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE,fill = TRUE, header = TRUE)
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE,fill = TRUE, header = TRUE)
ui <- fluidPage(
titlePanel("Eviction Data Report in the United States"),
sidebarLayout(
sidebarPanel(
# State Widget
selectInput("State", "Select State", choices = state_data$name, selected = ""),
# Year Slider
sliderInput('year_choice', label = "Choose Year", min = year_range[1],
max = year_range[2], value = 2000,step = 1)
),
mainPanel(
tabsetPanel(
tabPanel("Table", br(), strong(textOutput("table_info")), br(), tableOutput("table")),
tabPanel("Plot", br(), strong(textOutput("plot_info")), br(), plotOutput("plot"
, click = "plot_click"), em(textOutput("click_info")))
)
)
)
)
View(data)
View(data)
#####################
#### SECTION TWO ####
#####################
#Jeremy: For a particular year, top 5 crimes in a bar graph, followed with an analysis
library(data.table)
#####################
#### SECTION TWO ####
#####################
#Jeremy: For a particular year, top 5 crimes in a bar graph, followed with an analysis
install.packages(data.table)
View(data)
View(data)
?selectInput
library(dplyr)
library(dplyr)
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE, fill = TRUE, header = TRUE)
district_data <- filter(data, District.Sector ==
toupper(input$user_district[1])) %>% # Filter for the user selected district via a selection drop down
distinct(district_data) # Now filter for the top 5 highest frequencies
district_data <- filter(data, District.Sector ==
toupper("U")) %>% # Filter for the user selected district via a selection drop down
distinct(district_data) # Now filter for the top 5 highest frequencies
district_data <- filter(data, District.Sector ==
toupper("U")) %>% # Filter for the user selected district via a selection drop down
distinct(district_data) # Now filter for the top 5 highest frequencies
distinct(district_data) # Now filter for the top 5 highest frequencies
df <- distinct(district_data) # Now filter for the top 5 highest frequencies
View(df)
View(df)
df <- distinct(district_data, Summarized.Offense.Description) #
View(df)
View(df)
?distinct
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE, fill = TRUE, header = TRUE)
district_data <- filter(data, District.Sector ==
toupper("U")) # Filter for the user selected district via a selection drop down
result <- select(crime_data,Date.Reported,Longitude,Latitude,Location,
Month,Year)
result <- select(data, Date.Reported, Longitude, Latitude, Location,
Month, Year)
View(result)
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE, fill = TRUE, header = TRUE)
district_data <- filter(data, District.Sector ==
toupper("U")) # Filter for the user selected district via a selection drop down
result <- select(district_data, Summarized.Offense.Discription, District.Sector)
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE, fill = TRUE, header = TRUE)
district_data <- filter(data, District.Sector ==
toupper("U")) # Filter for the user selected district via a selection drop down
result <- select(district_data, Summarized.Offense.Description, District.Sector)
View(result)
df <- distinct(district_data, Summarized.Offense.Description) #
View(df)
sapply(result, length(unique(result$Summarized.Offense.Description)))
sapply(result, function(result$Summarized.Offense.Description)
length(unique(result$Summarized.Offense.Description)))
sapply(result, function(result$Summarized.Offense.Description)
result <- select(district_data, Summarized.Offense.Description)
sapply(result, function(result$Summarized.Offense.Description)
sapply(result, function(result)
df <- distinct(district_data, Summarized.Offense.Description) #
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE, fill = TRUE, header = TRUE)
district_data <- filter(data, District.Sector ==
toupper("U")) # Filter for the user selected district via a selection drop down
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE, fill = TRUE, header = TRUE)
district_data <- filter(data, District.Sector ==
toupper("U")) # Filter for the user selected district via a selection drop down
View(district_data)
result <- select(district_data, Summarized.Offense.Description)
View(result)
df <- distinct(district_data, Summarized.Offense.Description) #
View(df)
?nrow
# Selects just the Summarized.Offense.Description Column
result <- select(district_data, Summarized.Offense.Description) %>%
group_by(Summarized.Offense.Description)
grouped_result <- group_by(result, Summarized.Offense.Description)
View(grouped_result)
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description)
View(grouped_result)
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
n()
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
n(.)
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
n = n()
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
n = n()
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
summarize(
n = n()
)
View(grouped_result)
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
summarize(
n = n()
) %>%
arrange(-n) %>%
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
summarize(
n = n()
) %>%
arrange(-n)
# Selects just the Summarized.Offense.Description Column
# result <- select(district_data, Summarized.Offense.Description)
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
summarize(
n = n()
) %>%
arrange(-n)
is.data.frame(grouped_result)
top_5 <- grouped_result[1:5, ]
View(top_5)
# Creates
top_5 <- grouped_result[1:5, ]
runApp()
setwd("~/Desktop/INFO 201 HW/SeattlePDdataReport")
runApp()
bargraph <- ggplot(data = top_5) +
geombar(mapping = aes(x = Summarized.Offense.Description, y = n))
library(ggplot2)
bargraph <- ggplot(data = top_5) +
geombar(mapping = aes(x = Summarized.Offense.Description, y = n))
?geombar
bargraph <- ggplot(data = top_5) +
geom_bar(mapping = aes(x = Summarized.Offense.Description, y = n))
View(bargraph)
bargraph
View(bargraph)
?geom_bar
bargraph <- ggplot(data = top_5) +
geom_bar(mapping = aes(x = Summarized.Offense.Description, y = n), stat = "identity")
bargraph <- ggplot(data = top_5) +
geom_bar(mapping = aes(x = Summarized.Offense.Description, y = n), stat = "identity") +
ggtitle("Top 5 Crimes in the Selected District in 2017") +
xlab("Ethnicity") +
ylab("Percentage (%)")
bargraph
bargraph <- ggplot(data = top_5) +
geom_bar(mapping = aes(x = Summarized.Offense.Description, y = n), stat = "identity") +
ggtitle("Top 5 Crimes in the Selected District in 2017") +
xlab("Crime Type") +
ylab("Percentage (%)")
bargraph
runApp()
library(dplyr)
library(ggplot2)
library(tidyverse)
library(shiny)
library(leaflet)
library(leaflet.extras)
library(shinythemes)
install.packages("leaflet")
install.packages("leaflet.extras")
install.packages("shinythemes")
runApp()
runApp()
# Select desired columns
data <- select(data, Summarized.Offense.Description, District.Sector)
runApp()
View(data)
View(data)
runApp()
runApp()
View(data)
View(df)
View(data)
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE, fill = TRUE, header = TRUE)
View(data)
runApp()
runApp()
runApp()
View(top_5)
runApp()
runApp()
runApp()
data <- read.csv("./data/Seattle_police_data_2017.csv",na.strings = "NA",
stringsAsFactors = FALSE, fill = TRUE, header = TRUE)
# Filter for the user selected district via a selection drop down
district_data <- filter(data, Month == "1") %>%
# Selects the Summarized.Offense.Description Column and orders it by frequency
grouped_result <- group_by(district_data, Summarized.Offense.Description) %>%
summarize(
n = n()
) %>%
arrange(-n)
# Filter for the user selected district via a selection drop down
district_data <- filter(data, Month == "1")
View(district_data)
# Filter for the user selected district via a selection drop down
district_data <- filter(data, Month == "1") %>%
summarize(
n = n()
) %>%
arrange(-n)
View(district_data)
# Filter for the user selected district via a selection drop down
district_data <- filter(data, Month == "1")
View(district_data)
# Filter for the user selected district via a selection drop down
district_data <- filter(data, Month == "1") %>%
grouped_result <- group_by(Summarized.Offense.Description) %>%
summarize(
n = n()
) %>%
arrange(-n)
# Filter for the user selected district via a selection drop down
district_data <- filter(data, Month == "1") %>%
group_by(Summarized.Offense.Description) %>%
summarize(
n = n()
) %>%
arrange(-n)
View(district_data)
# Filter for the user selected district via a selection drop down
district_data <- filter(data, Month == "10") %>%
group_by(Summarized.Offense.Description) %>%
summarize(
n = n()
) %>%
arrange(-n)
top_5 <- district_data[1:5, ]
View(top_5)
runApp()
runApp()
View(top_5)
runApp()
runApp()
runApp()
install.packages(pracma)
install.packages("pracma")
runApp()
install.packages("compare")
runApp()
runApp()
temp <- top_5[, 1]
View(temp)
temp[1]
temp[1, ]
runApp()
runApp()
